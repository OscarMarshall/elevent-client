(ns views.explore
  (:require
    [clojure.set :refer [difference]]

    [cljs-time.coerce :refer [from-string]]
    [cljs-time.core :refer [after? at-midnight]]
    [cljs-time.format :refer [unparse]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [resources]
    [session]
    [util :refer [datetime-formatter]]))

(defc= attending-events (d/q '[:find ?event-id
                               :in $events $attendees ?user-id
                               :where
                               [$events ?event-id]
                               [$attendees ?attendee-id :EventId ?event-id]
                               [$attendees ?attendee-id :UserId ?user-id]]
                             resources/events-db
                             resources/attendees-db
                             (:UserId session/user)))

(defc= unattending-events (difference (d/q '[:find ?event-id
                                             :where [?event-id]]
                                           resources/events-db)
                                      attending-events))

(defn template []
  (div :class "ui page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div
          (div :class "ui vertical segment"
            (cell=
              (h1 :class "ui header"
                "Explore Events"
                (a :href "#/events/add"
                   :class (str "ui right floated small button"
                               (when (not app/token)
                                 " disabled"))
                  "Add Event"))))
          (div :class "ui vertical segment"
            (div :class "ui divided items"
              (loop-tpl :bindings [event (cell=
                                           (map #(d/entity resources/events-db
                                                           (first %))
                                                unattending-events))]
                (div :class "item"
                  (div :class "content"
                    (a :class "header" :href (str "#/events/" (:EventId @event))
                      (text (:Name event)))
                    (div :class "meta"
                      (b "Date: ")
                      (let [start (from-string (:StartDate @event))
                            end   (from-string (:EndDate   @event))]
                        (str (unparse datetime-formatter start)
                             (when (after? end start)
                               (str " to " (unparse datetime-formatter end))))))
                    (div :class "meta"
                      (b "Venue: ")
                      (text "~{(:Venue event)}"))
                    (div :class "description"
                      (text (:Description event)))
                    (div :class "extra"
                      (cell=
                        (a :class (str "ui right floated button"
                                       (when (not app/token)
                                         " disabled"))
                           :href (str "#/events/" (:EventId event) "/register")
                          "Register"
                          (i :class "right chevron icon"))))))))))
        (div :do-class (cell= {:ui true
                               :active (empty? resources/events)
                               :dimmer true})
          (div :class "ui loader"))))))

(defroute events "/explore" []
  (reset! app/breadcrumbs (list "Explore"))
  (template))
