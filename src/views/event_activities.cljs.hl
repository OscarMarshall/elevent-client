(ns views.event-activities
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.format :refer [unparse]]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [resources]
    [session]
    [util :refer [datetime-formatter]]))

(defc event-id nil)
(defc= event {})
(defc= event-activities [])

(def breadcrumbs (list ["Events" "#/events"]

                       [(cell= (:Name event))
                        (str "#/events/" (:EventId event))]

                       "Activities"))

(def template
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui header"
            (text "Activities for ~{(:Name event)}")))
        (div :class "ui vertical segment"
          (div :class "ui divided items"
            (loop-tpl :bindings [activity []]
              (div :class "item"
                (div :class "content"
                  (a :class "header" (text (:Name activity)))
                  (div :class "meta" (text (:Location activity)))
                  (let [start (from-string (:StartTime @activity))
                        end (from-string (:EndTime @activity))]
                    (div (str (unparse datetime-formatter start)
                              " - "
                              (unparse datetime-formatter end))))
                  (div :class "description"
                    (text (:Description activity))))))))))))

(defroute "/events/:EventId/activities" [EventId]
  (reset! app/breadcrumbs breadcrumbs)
  (reset! event-id (int EventId))
  template)
