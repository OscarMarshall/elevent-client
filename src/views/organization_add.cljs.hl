(ns views.organization-add
  (:require
    [secretary.core :as secretary :refer-macros [defroute]]
    [cljs-time.core :refer  [now]]
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.format :refer [formatters unparse]]
    [elements :refer [input-cell input-field submit]]
    [validateur.validation :as val]
    [app]
    [resources]))

(defc organization nil)

(defc= form-data
  {:Name organization
   :AdminId (:UserId session/user)})

(def validator (val/validation-set
                 (val/presence-of :Name :message "Required field")))

(defn create-organization [form-data]
  (resources/organizations-endpoint :create
                                    form-data
                                    #(set! js/location "#/organizations")))

(def breadcrumbs (list ["Organizations" "#/organizations"]
                       "Add"))

(defn template []
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui form"
          (div :class "ui vertical segment"
            (h2 :class "ui dividing header"
              "Add an Organization")
            (div :class "field"
              (input-field :class "required field" :field :Name :form-data form-data
                (label "Organization Name")
                (input-cell :type "text" :state organization)))
            (submit :class "ui primary button" :form-data form-data
                    :on-click #(create-organization @form-data)
              "Add")))))))

(defroute organization-add "/organizations/add" []
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (app/reset-validation! validator)
      (template))
    (set! js/location "#/")))
