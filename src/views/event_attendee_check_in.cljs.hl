(ns views.event-attendee-check-in
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.core :refer [after? at-midnight now]]
    [cljs-time.format :refer [formatters unparse]]
    [ajax.core :refer [PUT DELETE]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [util :refer [date-formatter]]
    [resources]))

(defc event-id nil)
(defc= event (when event-id
               (let [entity (d/entity resources/events-db event-id)]
                 (when (seq entity)
                   entity))))

(defc attendee-id nil)
(defc= attendee (when attendee-id
                  (first (map (fn [[user-id attendee-id]]
                                (merge (into {} (d/entity resources/users-db
                                                          user-id))
                                       (into {} (d/entity resources/attendees-db
                                                          attendee-id))))
                              (d/q '[:find ?e ?a
                                     :in $ ?attendee-id
                                     :where
                                     [?a :AttendeeId ?attendee-id]
                                     [?a :UserId ?e]]
                                   resources/attendees-db
                                   attendee-id)))))

(defc button-loading? false)
(defc= button-text (if button-loading?
                     (list (i :class "spinner loading icon"))
                     (if (:CheckinTime attendee)
                       "Check out"
                       "Check in")))

(defn check-in [attendee-id]
  (reset! button-loading? true)
  (PUT (str app/api-base-url "/attendees/" attendee-id "/checkin")
       {:format :json
        :keywords? true
        :headers
        (if @app/token
          {:Authentication
           (str "Bearer " @app/token)}
          {})
        :handler
        (fn []
          (js/console.log "Checked in!")
          (resources/attendees-endpoint
            :read nil #(reset! button-loading? false)))
        :error-handler
        (fn []
          (reset! button-loading? false)
          (swap! app/messages
                 conj
                 [:error "Check-in failed. Please try again."]))}))

(defn check-out [attendee-id]
  (reset! button-loading? true)
  (DELETE (str app/api-base-url "/attendees/" attendee-id "/checkin")
               {:format :json
                :keywords? true
                :headers
                (if @app/token
                  {:Authentication
                   (str "Bearer " @app/token)}
                  {})
                :handler
                (fn []
                  (js/console.log "Checked out!")
                  (resources/attendees-endpoint
                    :read nil #(reset! button-loading? false)))
                :error-handler
                (fn []
                  (reset! button-loading? false)
                  (swap! app/messages
                         conj
                         [:error "Check-out failed. Please try again."]))}))

(def breadcrumbs (list ["Events"              "#/events"]
                       [(cell= (:Name event)) (cell= (str "#/events"
                                                          "/" event-id))]
                       ["Attendees"           (cell= (str "#/events"
                                                          "/" event-id
                                                          "/attendees"))]
                       [(cell= (str (:FirstName attendee)
                                    " "
                                    (:LastName attendee)))
                                              (cell= (str "#/events"
                                                          "/" event-id
                                                          "/attendees"
                                                          "/" attendee-id))]
                       "Check-in"))

(defn template []
  (div :class "ui page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div
          (div :class "ui vertical segment"
            (h1 :class "ui header"
              (text "~{(:FirstName attendee)} ~{(:LastName attendee)}")))
          (div :class "ui vertical segment"
            (h2 :class "ui header"
              "Attendee Info")
            (table :class "ui definition table attendee-info"
              (cell=
                (tbody
                  (tr
                    (td "Email")
                    (td (:Email attendee)))
                  (tr
                    (td "Gender")
                    (td (:Gender attendee)))
                  (tr
                    (td "High School")
                    (td (:HighSchool attendee)))
                  (tr
                    (td "Class Year")
                    (td (:ClassYear attendee)))
                  (tr
                    (td "Group")
                    (td (:Group attendee)))))))
          (div :class "ui vertical segment"
            (div :class "ui divided items"
              (div :class "item"
                (div :class "content"
                  (a :class "header"
                     :href (cell= (str "#/events/" (:EventId event)))
                    (text "~(:Name event)"))
                  (div :class "meta"
                    (b "Date: ")
                    (text
                      (when event
                        (let [start (from-string (:StartDate event))
                              end   (from-string (:EndDate   event))]
                          (str (unparse date-formatter start)
                               (when (after? end start)
                                 (str " to " (unparse date-formatter end))))))))
                  (div :class "description"
                    (text "~{(:Description event)}"))
                  (div :class "extra"
                    (cell=
                      (div :class "ui right floated button"
                           :on-click #(if (:CheckinTime attendee)
                                        (check-out attendee-id)
                                        (check-in attendee-id))
                          button-text))))))))
        (div :do-class (cell= {:ui true
                               :active (empty? resources/events)
                               :dimmer true})
          (div :class "ui loader"))))))

(defroute "/events/:EventId/attendees/:AttendeeId/checkin" [EventId AttendeeId]
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (reset! event-id (int EventId))
      (reset! attendee-id (int AttendeeId))
      (template))
    (set! js/location "#/")))
