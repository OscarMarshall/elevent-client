(ns views.event-attendee-check-in
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.core :refer [after? at-midnight now]]
    [cljs-time.format :refer [formatters unparse]]
    [ajax.core :refer [PUT DELETE]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [util :refer [date-formatter datetime-formatter]]
    [resources]))

(defc event-id nil)
(defc= event (when event-id
               (let [entity (d/entity resources/events-db event-id)]
                 (when (seq entity)
                   entity))))

(defc attendee-id nil)
(defc= attendee (when attendee-id
                  (first (map (fn [[user-id attendee-id]]
                                (merge (into {} (d/entity resources/users-db
                                                          user-id))
                                       (into {} (d/entity resources/attendees-db
                                                          attendee-id))))
                              (d/q '[:find ?e ?a
                                     :in $ ?attendee-id
                                     :where
                                     [?a :AttendeeId ?attendee-id]
                                     [?a :UserId ?e]]
                                   resources/attendees-db
                                   attendee-id)))))

(defc= attendee-activities
  (d/q '[:find ?schedule-id ?activity-id
         :in $activities $schedules $attendees ?event-id ?attendee-id
         :where
         [$activities ?activity-id :EventId ?event-id]
         [$attendees  ?a :AttendeeId ?attendee-id]
         [$attendees  ?a :UserId ?user-id]
         [$schedules  ?schedule-id :UserId     ?user-id]
         [$schedules  ?schedule-id :ActivityId ?activity-id]]
       resources/activities-db
       resources/schedules-db
       resources/attendees-db
       event-id
       attendee-id))

(defc button-loading? false)
(defc= button-text (if button-loading?
                     (list (i :class "spinner loading icon"))
                     (if (:CheckinTime attendee)
                       "Check out"
                       "Check in")))

(defn check-in-or-out [op url init callback]
  (init)
  (op (str app/api-base-url url)
       {:format :json
        :keywords? true
        :headers
        (if @app/token
          {:Authentication
           (str "Bearer " @app/token)}
          {})
        :handler callback
        :error-handler (fn []
                         (swap! app/messages conj [:error "Check in failed. Please try again."]))}))

(defn check-in [attendee-id]
  (check-in-or-out PUT
                   (str "/attendees/" attendee-id "/checkin")
                   #(reset! button-loading? true)
                   (fn []
                     (prn "Checked in!")
                     (resources/attendees-endpoint :read nil #(reset! button-loading? false)))))

(defn check-out [attendee-id]
  (check-in-or-out DELETE
                   (str "/attendees/" attendee-id "/checkin")
                   #(reset! button-loading? true)
                   (fn []
                     (prn "Checked out!")
                     (resources/attendees-endpoint :read nil #(reset! button-loading? false)))))

(defn activity-check-in [schedule-id checking-in checked-in]
  (check-in-or-out PUT
                   (str "/schedules/" schedule-id "/checkin")
                   #(reset! checking-in true)
                   (fn []
                     (prn "Checked in!")
                     (resources/schedules-endpoint :read nil #(do
                                                                (reset! checking-in false)
                                                                (reset! checked-in true))))))

(defn activity-check-out [schedule-id checking-in checked-in]
  (check-in-or-out DELETE
                   (str "/schedules/" schedule-id "/checkin")
                   #(reset! checking-in true)
                   (fn []
                     (prn "Checked out!")
                     (resources/schedules-endpoint :read nil #(do
                                                                (reset! checking-in false)
                                                                (reset! checked-in false))))))

(defn activity-check-in-out [schedule-id checking-in checked-in]
  (if @checked-in
    (activity-check-out @schedule-id checking-in checked-in)
    (activity-check-in @schedule-id checking-in checked-in)))

(def breadcrumbs (list ["Events"              "#/events"]
                       [(cell= (:Name event)) (cell= (str "#/events"
                                                          "/" event-id))]
                       ["Attendees"           (cell= (str "#/events"
                                                          "/" event-id
                                                          "/attendees"))]
                       [(cell= (str (:FirstName attendee)
                                    " "
                                    (:LastName attendee)))
                                              (cell= (str "#/events"
                                                          "/" event-id
                                                          "/attendees"
                                                          "/" attendee-id))]
                       "Check-in"))

(defn template []
  (div :class "ui page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div
          (div :class "ui vertical segment"
            (h1 :class "ui header"
              (text "~{(:FirstName attendee)} ~{(:LastName attendee)}")))
          (div :class "ui vertical segment"
            (div :class "ui divided items"
              (div :class "item"
                (div :class "content"
                  (a :class "header"
                     :href (cell= (str "#/events/" (:EventId event)))
                    (text "~(:Name event)"))
                  (div :class "meta"
                    (b "Date: ")
                    (text
                      (when event
                        (let [start (from-string (:StartDate event))
                              end   (from-string (:EndDate   event))]
                          (str (unparse datetime-formatter start)
                               (when (after? end start)
                                 (str " to " (unparse datetime-formatter end))))))))
                  (div :class "meta"
                       (b "Venue: ")
                       (text "~{(:Venue event)}"))
                  (div :class "description"
                    (text "~{(:Description event)}"))
                  (div :class "extra"
                    (cell=
                      (div :class "ui right floated button"
                           :on-click #(if (:CheckinTime attendee)
                                        (check-out attendee-id)
                                        (check-in attendee-id))
                          button-text)))))))
          (div :class "ui vertical segment"
            (h3 :class "ui header"
              "Attendee Info")
            (table :class "ui definition table attendee-info"
              (cell=
                (tbody
                  (tr
                    (td "Email")
                    (td (:Email attendee)))))))
          (div :class "ui vertical segment"
            (h3 :class "ui header"
              "Attendee Schedule")
            (table :class "ui table"
              (thead
                (tr
                  (th "Start")
                  (th "End")
                  (th "Activity")
                  (th "Location")
                  (th)))
              (tbody
                (loop-tpl :bindings [[schedule-id activity-id]
                                     attendee-activities]
                  (let [activity
                        (cell= (when activity-id
                                 (d/entity resources/activities-db activity-id)))
                        schedule
                        (cell= (when schedule-id
                                 (d/entity resources/schedules-db schedule-id)
                                 #_(d/q '[:find [?e ?user-id ?check-in-time]
                                        :in $ ?schedule-id
                                        :where
                                        [?e :ScheduleId ?schedule-id]
                                        [?e :UserId ?user-id]
                                        [?e :CheckinTime ?check-in-time]]
                                      resources/schedules-db
                                      schedule-id)))]
                    (let
                      [checked-in (cell (not (nil? (:CheckinTime @schedule))))
                       checking-in (cell false)]
                      (tr
                        (td :nowrap true
                            (text (when activity
                                    (unparse datetime-formatter
                                             (from-string (:StartTime activity))))))
                        (td :nowrap true
                            (text (when activity
                                    (unparse datetime-formatter
                                             (from-string (:EndTime activity))))))
                        (td (text (:Name activity)))
                        (td (text (:Location activity)))
                        (td :class "right aligned" :nowrap true
                          (div :class "ui button"
                               :on-click (fn []
                                           (activity-check-in-out schedule-id checking-in checked-in))
                               (cell= (if checking-in
                                        (i :class "spinner loading icon")
                                        (if checked-in
                                          "Check out"
                                          "Check in"))))))))))
              (tfoot
                (tr
                  (th :colspan "6"
                      (div :class "ui small labeled icon button"
                           (i :class "print icon") "Print")))))))
        (div :do-class (cell= {:ui true
                               :active (empty? resources/events)
                               :dimmer true})
          (div :class "ui loader"))))))

(defroute "/events/:EventId/attendees/:AttendeeId/check-in" [EventId AttendeeId]
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (reset! event-id (int EventId))
      (reset! attendee-id (int AttendeeId))
      (template))
    (set! js/location "#/")))
