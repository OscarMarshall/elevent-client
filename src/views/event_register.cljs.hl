(ns views.event-register
  (:require
    [clojure.string :refer [split-lines]]
    [secretary.core :as secretary :refer-macros [defroute]]
    [elements :refer [input-cell]]
    [session]
    [resources]))

(defc event-id nil)
(defc= event (resources/events event-id))

(defc email nil)
(defc first-name nil)
(defc last-name nil)
(defc phone nil)
(defc birth-date nil)

(defc= form-data {:email email
                  :first-name first-name
                  :last-name last-name
                  :phone phone
                  :birth-date birth-date})

(defn form-reset! []
  (reset! email nil)
  (reset! first-name nil)
  (reset! last-name nil)
  (reset! phone nil)
  (reset! birth-date nil))

(defn register-event [form-data]
  (resources/api-get
    (str "/users?email=" (:email form-data))
    {:handler
     (fn [json]
       (let [user-id
             (:UserId json)

             create-attendee
             (fn [user-id]
               (resources/api-post (str "/events/" 2 "/attendees")
                                   {:handler (fn [json]
                                               (session/login! user-id)
                                               (set! (.-location js/page)
                                                     "/#/events/2/schedule"))
                                    :data {:UserId user-id}}))]
         (if (zero? user-id)
           ; user does not exist
           (resources/api-post "/users"
                               {:handler (fn [json]
                                           (create-attendee (:UserId json)))
                                :data {:Email     (:email form-data)
                                       :FirstName (:first-name form-data)
                                       :LastName  (:last-name form-data)}})
           (create-attendee user-id))))}))

; TODO: error checking for user
; form validation

(def template
  (div :class "ui stackable page grid"
    (div :class "twelve wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (img :src "images/aasa-high-school-conference-registration-1.png"
               :width "100%")
          (h2 :class "ui dividing header"
            (text "Register for ~{(:Name event)}"))
          (loop-tpl :bindings [line (cell= (split-lines (:Description event)))]
            (p line)))
        (div :class "ui vertical segment"
          (div :class "ui form"
            (div :class "one field"
              (div :class "required field"
                (label "Email")
                (input-cell :type "text" :state email)))
            (div :class "two fields"
              (div :class "required field"
                (label "First Name")
                (input-cell :type "text" :state first-name))
              (div :class "required field"
                (label "Last Name")
                (input-cell :type "text" :state last-name)))
            (div :class "two fields"
              (div :class "required field"
                (label "Phone Number")
                (input-cell :type "text" :state phone))
              (div :class "required field"
                (label "Date of Birth")
                (input-cell :type "text" :state birth-date)))
            (div :class "ui primary button"
                 :on-click #(register-event @form-data)
              (text "Register"))))))))

(defroute "/events/:EventId/register" [EventId]
  (reset! event-id (int EventId))
  (reset! page/breadcrumbs
          (list ["Events" "#/events"]
                [(cell= (:Name event)) (str "#/events/" EventId)]
                "Register"))
  template)
