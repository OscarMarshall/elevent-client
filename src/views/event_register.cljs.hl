(ns views.event-register
  (:require
    [clojure.string :refer [split-lines]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [elements :refer [input-cell]]
    [resources]
    [session]))

(defc event-id nil)
(defc= event (when event-id (d/entity resources/events-db event-id)))

(defc= email (:Email session/user))
(defc= first-name (:FirstName session/user))
(defc= last-name (:LastName session/user))

(defc= form-data {:email email
                  :first-name first-name
                  :last-name last-name})

(defn form-reset! []
  (reset! email nil)
  (reset! first-name nil)
  (reset! last-name nil))

(defn register-event [form-data]
  (resources/attendees-endpoint :create
                                {:UserId (:UserId @session/user)
                                 :EventId @event-id}
                                nil))

; TODO: error checking for user
; form validation

(defn template []
  (div :class "ui stackable page grid"
    (div :class "twelve wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui header"
            (text "Register for ~{(:Name event)}"))
          (loop-tpl :bindings [line (cell= (split-lines (:Description event)))]
            (p line)))
        (div :class "ui vertical segment"
          (div :class "ui form"
            (div :class "one field"
              (div :class "required field"
                (label "Email")
                (input-cell :type "text" :state email)))
            (div :class "two fields"
              (div :class "required field"
                (label "First Name")
                (input-cell :type "text" :state first-name))
              (div :class "required field"
                (label "Last Name")
                (input-cell :type "text" :state last-name)))
            (div :class "ui primary button"
                 :on-click #(register-event @form-data)
              (text "Register"))))))))

(defroute "/events/:EventId/register" [EventId]
  (if @app/token
    (do
      (reset! event-id (int EventId))
      (reset! app/breadcrumbs
              (list ["Events" "#/events"]
                    [(cell= (:Name event)) (str "#/events/" EventId)]
                    "Register"))
      (template))
    (set! js/location "#/")))
