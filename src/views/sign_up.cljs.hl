(ns views.sign-up
  (:require
    [elements :refer [input-cell input-field submit]]
    [validateur.validation :as val]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [resources]
    [session]))

(defc email nil)
(defc first-name nil)
(defc last-name nil)
(defc password nil)
(defc password-confirm nil)

(defc= form-data {:Email email
                  :FirstName first-name
                  :LastName last-name
                  :Password password
                  :PasswordConfirm password-confirm})

(def validator
  (fn [form-data]
    (merge-with (fn [l r] (apply conj l r))
                ((val/validation-set
                   (val/format-of :Email
                                  :format #"^[-!#$%&'*+/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+/0-9=?A-Z^_a-z{|}~])*@[a-zA-Z](-?[a-zA-Z0-9])*(\.[a-zA-Z](-?[a-zA-Z0-9])*)+$"
                                  :message "Please input email"
                                  :blank-message "Required field")
                   (val/presence-of :FirstName :message "Required field")
                   (val/presence-of :LastName :message "Required field")
                   (val/presence-of :Password :message "Required field")
                   (val/presence-of :PasswordConfirm :message "Required field")) form-data)
                (if (and
                      (not (empty? (:Password form-data)))
                      (not (empty? (:PasswordConfirm form-data)))
                      (not= (:Password form-data) (:PasswordConfirm form-data)))
                  {:Password #{"Passwords must match"}
                   :PasswordConfirm #{"Passwords must match"}}
                  nil))))

; TODO don't send the password in plaintext
(defn sign-up-site [form-data]
  #_(js/console.log (prn-str (@app/validator form-data)))
  (resources/users-endpoint :create
                            (dissoc form-data :PasswordConfirm)
                            #(do
                               (session/login! (:Email form-data)
                                               (:Password form-data))
                               (set! js/location "#/"))))

(defn template []
  (div :class "ui page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (h1 :class "ui header"
          "Sign up for an account")
        (div :class "ui vertical segment"
          (div :class "ui form"
            (div :class "one field"
              (input-field :class "required field" :field :Email :form-data form-data
                (label "Email")
                (input-cell :type "text" :state email)))
            (div :class "two fields"
              (input-field :class "required field" :field :FirstName :form-data form-data
                (label "First Name")
                (input-cell :type "text" :state first-name))
              (input-field :class "required field" :field :LastName :form-data form-data
                (label "Last Name")
                (input-cell :type "text" :state last-name)))
            (div :class "two fields"
              (input-field :class "required field" :field :Password :form-data form-data
                (label "Password")
                (input-cell :type "password" :state password :on-blur #(app/validate! :PasswordConfirm form-data)))
              (input-field :class "required field" :field :PasswordConfirm :form-data form-data
                (label "Confirm password")
                (input-cell :type "password" :state password-confirm :on-blur #(app/validate! :Password form-data))))
            (submit :class "ui primary button" :form-data form-data
                 :on-click #(sign-up-site @form-data)
              "Sign Up")))))))

(defroute "/sign-up" []
  (reset! app/breadcrumbs
          (list "Sign up"))
  (app/reset-validation! validator)
  (template))
