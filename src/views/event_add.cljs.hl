(ns views.event-add
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.core :refer  [now]]
    [cljs-time.format :refer [formatters unparse]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [elements :refer [input-cell]]
    [resources]))

(defc event-title nil)
(defc organization nil)
(defc venue nil)
(defc start-date (unparse (:date formatters) (now)))
(defc end-date   (unparse (:date formatters) (now)))
(defc description nil)
(defc= form-data
  {:Name event-title
   :StartDate   (unparse (:date-hour-minute-second formatters)
                         (from-string start-date))
   :EndDate     (unparse (:date-hour-minute-second formatters)
                         (from-string end-date))
   :Description description})

(defn create-event [form-data]
  (resources/events-endpoint :create
                             form-data
                             #(set! js/location "#/events")))

(def breadcrumbs (list ["Events" "#/events"]
                       "Add"))

(defn template []
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui form"
          (div :class "ui vertical segment"
            (h2 :class "ui dividing header"
              "Add an Event")
            (div :class "two fields"
              (div :class "required field"
                (label "Title")
                (input-cell :type "text" :state event-title))
              (div :class "field"
                (label "Clone From")
                (select :class "ui"
                  (option :value "" "None")))))
          (div :class "ui vertical segment"
            (div :class "two fields"
              (div :class "required field"
                (label "Organization")
                (input-cell :type "select" :class "ui"
                            :state organization
                            :options (cell=
                                       (map #(let [organization
                                                   (d/entity
                                                     resources/organizations-db
                                                     %)]
                                               [(:Name organization)
                                                (:OrganizationId organization)])
                                        (d/q '[:find [?organization-id ...]
                                              :where [?organization-id]]
                                            resources/organizations-db)))))
              (div :class "required field"
                (label "Venue")
                (input-cell :type "text" :state venue)))
            (div :class "two fields"
              (div :class "required field"
                (label "Start Date")
                (input-cell :type "date" :state start-date))
              (div :class "required field"
                (label "End Date")
                (input-cell :type "date" :state end-date)))
            (div :class "field"
              (label "Description")
              (input-cell :type "textarea" :state description))
            (div :class "ui primary button" :on-click #(create-event @form-data)
              "Add")))))))

(defroute event-add "/events/add" []
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (template))
    (set! js/location "#/")))
