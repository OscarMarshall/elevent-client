(ns views.event-schedule
  (:require
    [clojure.set :refer [difference]]

    [cljs-time.coerce :refer [from-string]]
    [cljs-time.format :refer [unparse]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [resources]
    [session]
    [util :refer [datetime-formatter]]))

(defc event-id nil)
(defc= event (when-let [[name]
                        (when event-id
                          (first (d/q '[:find ?name
                                        :in $ ?event-id
                                        :where [?event-id :Name ?name]]
                                      resources/events-db event-id)))]
               {:Name name}))

(defc= scheduled-activities
  (d/q '[:find ?schedule-id ?activity-id
         :in $activities $schedules ?event-id ?user-id
         :where
         [$activities ?activity-id :EventId ?event-id]
         [$schedules  ?schedule-id :UserId     ?user-id]
         [$schedules  ?schedule-id :ActivityId ?activity-id]]
       resources/activities-db
       resources/schedules-db
       event-id
       (:UserId session/user)))

(defc= event-activities
  (d/q '[:find ?activity-id
         :in $ ?event-id
         :where
         [?activity-id :EventId ?event-id]]
       resources/activities-db
       event-id))

(defc= unscheduled-activities
  (difference event-activities (into #{} (map #(vector (second %))
                                              scheduled-activities))))

(defn add-activity! [user-id activity-id]
  (resources/schedules-endpoint :create
                                {:ActivityId activity-id
                                 :UserId     user-id}
                                nil))

(defn remove-activity! [schedule]
  (resources/schedules-endpoint :delete schedule nil))

(def breadcrumbs (list ["Events" "#/events"]
                       [(cell= (:Name event))
                        (cell= (str "#/events/" event-id))]
                       "My Schedule"))

(defn template []
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui header"
            (text "~(:FirstName session/user)'s Schedule for ~(:Name event)")))
        (div :class "ui vertical segment"
          (table :class "ui table"
            (thead
              (tr
                (th "Start")
                (th "End")
                (th "Activity")
                (th "Location")
                (th)))
            (tbody
              (loop-tpl :bindings [[schedule-id activity-id]
                                   scheduled-activities]
                (let [activity
                      (cell= (when activity-id
                               (d/entity resources/activities-db activity-id)))]
                  (tr
                    (td :nowrap true
                        (text (when activity
                                (unparse datetime-formatter
                                         (from-string (:StartTime activity))))))
                    (td :nowrap true
                        (text (when activity
                                (unparse datetime-formatter
                                         (from-string (:EndTime activity))))))
                    (td (text (:Name activity)))
                    (td (text (:Location activity)))
                    (td :class "right aligned" :nowrap true
                        (div :class "ui button"
                             :on-click #(remove-activity!
                                          (d/entity @resources/schedules-db
                                                    @schedule-id))
                             (i :class "red remove icon")
                             "Remove"))))))
            (tfoot
              (tr
                (th :colspan "6"
                    (div :class "ui small labeled icon button"
                         (i :class "print icon") "Print"))))))
        (div :class "ui vertical segment"
          (div :class "ui divided items"
            (loop-tpl :bindings [[activity-id] unscheduled-activities]
              (let [activity
                    (cell= (when activity-id
                             (d/entity resources/activities-db activity-id)))]
                (div :class "item"
                  (div :class "content"
                    (a :class "header" (text (:Name activity)))
                    (div :class "meta" (text (:Location activity)))
                    (div (text "~(when activity
                                   (unparse datetime-formatter
                                            (from-string
                                              (:StartTime activity))))
                                -
                                ~(when activity
                                   (unparse datetime-formatter
                                            (from-string
                                              (:EndTime activity))))"))
                    (div :class "description"
                      (text (:Description activity)))
                    (div :class "extra"
                      (div :class "ui right floated primary button"
                           :on-click #(add-activity! (:UserId @session/user)
                                                     (:ActivityId @activity))
                        "Add" (i :class "right chevron icon")))))))))))))

(defroute "/events/:EventId/schedule" [EventId]
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (reset! event-id (int EventId))
      (template))
    (set! js/location "#/")))
