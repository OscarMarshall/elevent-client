(ns views.event-schedule
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.format :refer [unparse]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]

    [app]
    [resources]
    [session]
    [util :refer [datetime-formatter]]))

(defc event-id nil)
(defc= event (when-let [[name]
                        (when event-id
                          (first (d/q '[:find ?name
                                        :in $ ?event-id
                                        :where [?event-id :Name ?name]]
                                      resources/events-db event-id)))]
               {:Name name}))

(defc= scheduled-activities
  (map #(vector :ScheduleId  %1
                :ActivityId  %2
                :Name        %3
                :Location    %4
                :StartTime   %5
                :EndTime     %6)
       (d/q '[:find
              ?schedule-id
              ?activity-id
              ?name
              ?location
              ?start-time
              ?end-time

              :in
              $schedules
              $activities
              ?user-id

              :where
              [$schedules  ?schedule-id :UserId      ?user-id]
              [$schedules  ?schedule-id :ActivityId  ?activity-id]
              [$activities ?activity-id :Name        ?name]
              [$activities ?activity-id :Location    ?location]
              [$activities ?activity-id :StartTime   ?start-time]
              [$activities ?activity-id :EndTime     ?end-time]]
            resources/schedules-db
            resources/activities-db
            (:UserId session/user))))

(defc= unscheduled-activities
  (map #(vector :ActivityId  %1
                :Name        %2
                :Location    %3
                :StartTime   %4
                :EndTime     %5
                :Description %6)
       (d/q '[:find
              ?activity-id
              ?name
              ?location
              ?start-time
              ?end-time
              ?description

              :in
              $schedules
              $activities
              ?user-id

              :where
              [$schedules  ?schedule-id :UserId      ?user-id]
              (not [$schedules  ?schedule-id :ActivityId  ?activity-id])
              [$activities ?activity-id :Name        ?name]
              [$activities ?activity-id :Location    ?location]
              [$activities ?activity-id :StartTime   ?start-time]
              [$activities ?activity-id :EndTime     ?end-time]
              [$activities ?activity-id :Description ?description]]
            resources/schedules-db
            resources/activities-db
            (:UserId session/user))))

(defn add-activity! [user-id activity-id]
  (resources/schedules-endpoint :create {:ActivityId activity-id
                                         :UserId     user-id}))

(defn remove-activity [schedule]
  (resources/schedules-endpoint :delete schedule))

(def breadcrumbs (list ["Events" "#/events"]
                       [(cell= (:Name event)) (cell= (str "#/events/" event-id))]
                       "My Schedule"))

(defn template []
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui dividing header"
            (text "~(:FirstName session/user)'s Schedule for ~(:Name event)")))
          (table :class "ui table"
            (thead
              (tr
                (th "Start")
                (th "End")
                (th "Activity")
                (th "Location")
                (th)))
            (tbody
              (loop-tpl :bindings [activity scheduled-activities]
                (tr
                  (let [start (from-string (:StartTime @activity))]
                    (td :nowrap true (unparse datetime-formatter start)))
                  (let [end (from-string (:EndTime @activity))]
                    (td :nowrap true (unparse datetime-formatter end)))
                  (td (text (:Name activity)))
                  (td (text (:Location activity)))
                  (td :class "right aligned" :nowrap true
                    (div :class "ui button"
                         :on-click #(remove-activity (:ScheduleId @activity))
                      (i :class "red remove icon") "Remove")))))
            (tfoot
              (tr
                (th :colspan "6"
                  (div :class "ui small labeled icon button"
                    (i :class "print icon") "Print"))))))
        (div :class "ui vertical segment"
          (div :class "ui divided items"
            (loop-tpl :bindings [activity unscheduled-activities]
              (div :class "item"
                (div :class "content"
                  (a :class "header" (text (:Name activity)))
                  (div :class "meta" (text (:Location activity)))
                  (let [start (from-string (:StartTime @activity))
                        end (from-string (:EndTime @activity))]
                    (div (str (unparse datetime-formatter start)
                              " - "
                              (unparse datetime-formatter end))))
                  (div :class "description"
                    (text (:Description activity)))
                  (div :class "extra"
                    (div :class "ui right floated primary button"
                         :on-click #(add-activity! (:UserId @session/user)
                                                   (:ActivityId @activity))
                      "Add" (i :class "right chevron icon"))))))))))))

(defroute "/events/:EventId/schedule" [EventId]
  (if @session/user
    (do
      (reset! page/breadcrumbs breadcrumbs)
      (reset! event-id (int EventId))
      (template))
    (set! js/location "#/")))
