(ns views.event-schedule
  (:require
    [secretary.core :as secretary :refer-macros [defroute]]
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.format :refer [unparse]]
    [session]
    [resources]
    [util :refer [datetime-formatter]]))

(defc event-id nil)
(defc= event (resources/events event-id))

(defn add-activity [user-id activity-id]
  (resources/api-post "/schedules"
                      {:data {:ActivityId activity-id
                              :UserId user-id}
                       :handler (fn [] (swap! resources/schedules #(conj % activity-id)))}))

(defn remove-activity [user-id activity-id]
  (resources/api-delete (str "/schedules/" -1)
                        {:handler (fn [] (swap! resources/schedules
                                         #(vec (remove (partial == activity-id)
                                                       %))))}))

(def breadcrumbs (list ["Events" "#/events"]
                       [(cell= (:Name event)) (cell= (str "#/events/" event-id))]
                       "My Schedule"))

(defn template []
  (div :class "ui stackable page grid"
    (div :class "sixteen wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui dividing header"
            (text "~{(:FirstName session/user)}'s Schedule for ~{(:Name event)}"))
          (table :class "ui table"
            (thead
              (tr
                (th "Start")
                (th "End")
                (th "Activity")
                (th "Location")
                (th)))
            (tbody
              (loop-tpl :bindings [activity
                                   (cell= (map (get resources/activities
                                                    event-id)
                                               (map (fn [%] (:ActivityId %))
                                                      (get resources/schedules
                                                           (:UserId session/user)))))]
                (tr
                  (let [start (from-string (:StartTime @activity))]
                    (td :nowrap true (unparse datetime-formatter start)))
                  (let [end (from-string (:EndTime @activity))]
                    (td :nowrap true (unparse datetime-formatter end)))
                  (td (text (:Name activity)))
                  (td (text (:Location activity)))
                  (td :class "right aligned" :nowrap true
                    (div :class "ui button"
                         :on-click #(remove-activity
                                      (:UserId @session/user) (:ActivityId @activity))
                      (i :class "red remove icon") "Remove")))))
            (tfoot
              (tr
                (th :colspan "6"
                  (div :class "ui small labeled icon button"
                    (i :class "print icon") "Print"))))))
        (div :class "ui vertical segment"
          (div :class "ui divided items"
            (loop-tpl :bindings [activity
                                 (cell= (vals (apply
                                                dissoc
                                                (get resources/activities
                                                     event-id)
                                                (map (fn [%] (:ActivityId %))
                                                     (get resources/schedules
                                                          (:UserId session/user))))))]
              (div :class "item"
                (div :class "content"
                  (a :class "header" (text (:Name activity)))
                  (div :class "meta" (text (:Location activity)))
                  (let [start (from-string (:StartTime @activity))
                        end (from-string (:EndTime @activity))]
                    (div (str (unparse datetime-formatter start)
                              " - "
                              (unparse datetime-formatter end))))
                  (div :class "description"
                    (text (:Description activity)))
                  (div :class "extra"
                    (div :class "ui right floated primary button"
                         :on-click #(add-activity
                                      (:UserId @session/user) (:ActivityId @activity))
                      "Add" (i :class "right chevron icon"))))))))))))

(defroute "/events/:EventId/schedule" [EventId]
  (reset! page/breadcrumbs breadcrumbs)
  (reset! event-id (int EventId))
  (template))
