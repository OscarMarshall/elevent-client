(ns views.event-activities-add
  (:require
    [cljs-time.coerce :refer [from-string]]
    [cljs-time.core :refer  [after? at-midnight now]]
    [cljs-time.format :refer [formatters unparse parse]]
    [datascript :as d]
    [secretary.core :as secretary :refer-macros [defroute]]
    [util :refer [input-date-time-formatter]]

    [app]
    [elements :refer [input-cell input-field submit]]
    [resources]
    [util :refer [datetime-formatter]]
    [validateur.validation :as val]))

(defc event-id nil)
(defc= event (when event-id
               (let [entity (d/entity resources/events-db event-id)]
                 (when (seq entity)
                   entity))))

(defc activity-name nil)
(defc location nil)
(defc enrollment-cap nil)
(defc start-time nil)
(defc end-time nil)
(defc description nil)

(defc= form-data {:EventId event-id
                  :Name activity-name
                  :Location location
                  :EnrollmentCap enrollment-cap
                  :StartTime start-time #_(unparse (:date-hour-minute-second formatters)
                                      (parse input-date-time-formatter
                                             (str start-time " " start-date)))
                  :EndTime   end-time #_(unparse (:date-hour-minute-second formatters)
                                      (parse input-date-time-formatter
                                             (str end-time " " end-date)))
                  :Description description})

(defn form-reset! []
  (reset! activity-name nil)
  (reset! location nil)
  (reset! enrollment-cap nil)
  (reset! start-time nil)
  (reset! end-time nil)
  (reset! description nil))

(def validator (val/validation-set
                 (val/presence-of :Name :message "Required field")
                 (val/presence-of :Location :message "Required field")
                 (val/presence-of :StartTime :message "Required field")
                 (val/presence-of :EndTime :message "Required field")
                 (val/format-of :EnrollmentCap :format #"[0-9_]"
                                :allow-nil true
                                :allow-blank true
                                :message "Please enter a number")))

(defn add-activities [form-data]
  #_(js/console.log (prn-str (@app/validator form-data)))
  (resources/activities-endpoint :create
                                 (let [start-time (:StartTime form-data)
                                       end-time   (:EndTime form-data)]
                                   (assoc form-data
                                     :StartTime (unparse (:date-hour-minute-second formatters)
                                                         (from-string start-time))
                                     :EndTime (unparse (:date-hour-minute-second formatters)
                                                       (from-string end-time))))
                                 #(set! js/location "#/")))

(def breadcrumbs (list ["Events" "#/events"]
                       [(cell= (:Name event)) (cell= (str "#/events/" event-id))]
                       "Activities"))

(defn template []
  (div :class "ui page grid"
    (div :class "twelve wide column"
      (div :class "ui segment"
        (div :class "ui vertical segment"
          (h2 :class "ui header"
              (cell= (:Name event))))
        (div :class "ui vertical segment"
          (h2 :class "ui header"
              "Add activity")
          (div :class "ui form"
            (div :class "one field"
              (input-field :class "required field" :field :Name :form-data form-data
                (label "Name")
                (input-cell :type "text" :state activity-name)))
            (div :class "two fields"
              (input-field :class "required field" :field :Location :form-data form-data
                (label "Location")
                (input-cell :type "text" :state location))
              (input-field :class "field" :field :EnrollmentCap :form-data form-data
                (label "Enrollment Cap")
                (input-cell :type "text" :state enrollment-cap)))
            (div :class "two fields"
              (input-field :class "required field" :field :StartTime :form-data form-data
                (label "Start Time")
                (input-cell :type "datetime-local" :state start-time))
              (input-field :class "required field" :field :EndTime :form-data form-data
                (label "End Time")
                (input-cell :type "datetime-local" :state end-time)))
            (div :class "field"
              (label "Description")
              (input-cell :type "textarea" :state description))
            (submit :class "ui primary button" :form-data form-data
                    :on-click #(add-activities @form-data)
              "Create")))
        (div :class "ui vertical segment"
          (h2 :class "ui header"
              "Activities")
          (table :class "ui table"
            (thead
              (tr
                (th "Time")
                (th "Activity")
                (th "Location")))
            (tbody
              (loop-tpl :bindings [activity
                                   (cell=
                                     (map #(d/entity resources/activities-db %)
                                          (d/q '[:find [?e ...]
                                                 :in $ ?event-id
                                                 :where [?e :EventId ?event-id]]
                                               resources/activities-db
                                               event-id)))]
              (tr
                (td (text (let [start (from-string (:StartTime activity))
                                end   (from-string (:EndTime   activity))]
                            (str (unparse datetime-formatter start)
                                 (when (after? end start)
                                   (str " to "
                                        (unparse datetime-formatter end)))))))
                (td (text (:Name activity)))
                (td (text (:Location activity))))))))))))

(defroute "/events/:EventId/activities/add" [EventId]
  (if @app/token
    (do
      (reset! app/breadcrumbs breadcrumbs)
      (app/reset-validation! validator)
      (reset! event-id (int EventId))
      (template))
    (set! js/location "#/")))
