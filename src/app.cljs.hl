(ns app
  (:require
    [tailrecursion.hoplon.storage-atom :refer [local-storage]]))

;; Cell that's synchronized to the hash-fragment
(def route (route-cell "#/"))

(def api-base-url "http://elevent.solutions:8860")
(def api-base-url-secure "https://elevent.solutions:44300")

(def title-base "Elevent")
(def title-seperator " | ")

(defn title-prepare [page] (str title-base title-seperator page))

;; String used for page title
(defc title-string title-base)

;; Expects a collection of either a vector of a display text string and a url
;; string or a non-link display text string.
;;     (list ["Example" "example.com"] | "Name" ...)
(defc breadcrumbs nil)

;; Expects a collection of vectors of message-type string and message string.
;;     #{[:message|:warning|:info|:success|:error "text"] ...}
(defc messages #{})

(def token (local-storage (cell nil) ::token))

(def date-format "MMMM d, yyyy")
(def time-format "h:mma")
(def datetime-format "h:mma MMMM d, yyyy")
(def input-date-time-format "hh:mm a YYYY-MM-dd")

(defc validation-errors {})
(defc validator (fn [] nil))

(defn validate! [field form-data]
  (reset! validation-errors (merge @validation-errors {field (field (@validator @form-data))})))

(defn reset-validation! [page-validator]
  (reset! validator page-validator)
  (reset! validation-errors {}))
