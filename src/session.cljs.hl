(ns session
  (:require
    [ajax.core :refer [GET]]
    [datascript :as d]
    [goog.crypt.base64 :as b64]
    [tailrecursion.hoplon.storage-atom :refer [local-storage]]

    [app]
    [resources]))

(def username (local-storage (cell nil) ::username))
(defc= user (when-let [[user-id email first-name last-name middle-name]
                       (when session/username
                         (first (d/q '[:find ?user-id ?first-name
                                       :in $ ?email
                                       :where [?user-id :Email ?email]
                                              [?user-id :FirstName ?first-name]]
                                     resources/users session/username)))]
              {:UserId user-id
               :Email email
               :FirstName first-name
               :LastName last-name
               :MiddleName middle-name}))

(defn logout! []
  (dosync
    (reset! app/token nil)
    (reset! username  nil))
  (set! js/location "#/"))

(defn login! [username password]
  (let [auth-string (b64/encodeString (str username ":" password))]
    (GET (str app/api-base-url-secure "/token")
         {:format          :json
          :response-format :json
          :keywords?       true
          :headers         {:Authorization (str "Basic " auth-string)}
          :handler         #(dosync
                              (reset! session/username username)
                              (reset! app/token (:Token %)))
          :error-handler   #(logout!)}))) ;TODO: Create error handler.
