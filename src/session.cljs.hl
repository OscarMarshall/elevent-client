(ns session
  (:require
    [ajax.core :refer [GET]]
    [datascript :as d]
    [goog.crypt.base64 :as b64]
    [tailrecursion.hoplon.storage-atom :refer [local-storage]]

    [app]
    [resources]))

(def username (local-storage (cell nil) ::username))
(defc= user (when username
              (when-let [user-id (ffirst (d/q '[:find ?e
                                                :in $ ?u
                                                :where [?e :Email ?u]]
                                              resources/users-db
                                              username))]
                (into {} (seq (d/entity resources/users-db user-id))))))

(defn logout! []
  (dosync
    (reset! app/token nil)
    (reset! username  nil))
  (set! js/location "#/"))

(defn login! [username password]
  (let [auth-string (b64/encodeString (str username ":" password))]
    (GET (str app/api-base-url-secure "/token")
         {:format          :json
          :response-format :json
          :keywords?       true
          :headers         {:Authorization (str "Basic " auth-string)}
          :handler         #(dosync
                              (reset! session/username username)
                              (reset! app/token (:Token %)))
          :error-handler   #(logout!)}))) ;TODO: Create error handler.
