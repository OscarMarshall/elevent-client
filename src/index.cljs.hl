(page "index.html"
  (:require
    [secretary.core :as secretary :refer-macros [defroute]]
    [tailrecursion.hoplon.reload :refer [reload-all]]

    [app]
    [elements :refer [input-cell]]
    [session]
    [style]
    [views.calendar]
    [views.event]
    [views.event-activities]
    [views.event-activities-add]
    [views.event-add]
    [views.event-attendee-check-in]
    [views.event-attendees]
    [views.event-register]
    [views.event-schedule]
    [views.events]
    [views.explore]
    [views.home]
    [views.organization-add]
    [views.organizations]
    [views.page-not-found]
    [views.sidebar]
    [views.sign-in]
    [views.sign-up]))

(reload-all)

(secretary/set-config! :prefix "#")

(html
  (head
    (title app/title-string)
    (meta :Name "viewport" :content "width=device-width, initial-scale=1.0")
    (style style/stylesheet))
  (body
    (nav :class "ui fixed menu"
      (a :class "logo item" :href "#/"
        (img :src "images/logo-menu.png"))
      (a :class "item" :href "#/explore"
        (i :class "rocket icon") "Explore")
      (a :class (cell= {:item app/token}) :href "#/events"
        (i :class "ticket icon") "Events")
      (a :class "item" :href "#/organizations"
         (i :class "building icon") "Organizations")
      (a :class "item" :href "#/calendar"
        (i :class "calendar icon") "Calendar")
      (div :class "right menu"
        (cell=
          (if app/token
            (a :class "item" :on-click session/logout!
              (text "Sign out of ~(:FirstName session/user)'s account"))
            (list
              (a :class "item"
                 :on-click
                 (fn []
                   (.modal
                     (js/jQuery
                       (let [email (cell nil), password (cell nil)]
                         (form :class "ui small modal"
                               :on-submit (fn []
                                            (session/login! @email @password)
                                            false)
                           (i :class "close icon")
                           (div :class "header"
                             "Login")
                           (div :class "content"
                             (div :class "description"
                               (div :class "ui form"
                                 (div :class "two fields"
                                   (div :class "field"
                                     (label "Email")
                                     (input-cell :type "email"
                                                 :state email))
                                   (div :class "field"
                                     (label "Password")
                                     (input-cell :type "password"
                                                 :state password))))))
                           (div :class "actions"
                             (div :class "ui button" :on-click (fn [] false) "Cancel")
                             (input :type "submit" :class "ui button primary"
                               "Login")))))
                     "show"))
                (i :class "user icon")
                "Sign in")
              (a :class "item" :href "#/sign-up"
                "Sign up"))))))
    (div :class "ui page grid"
      (div :class "sixteen wide column"
        (div :class "ui breadcrumb"
          (span (cell= (if (empty? app/breadcrumbs)
                         (div :class "active section"
                           "Home")
                         (a :class "section" :href "/"
                           "Home"))))
          (loop-tpl :bindings [breadcrumb app/breadcrumbs]
            (span
              (div :class "divider" " / ")
              (span
                (cell=
                  (if (vector? breadcrumb)
                    (let [[text url] breadcrumb]
                      (a :class "section" :href url
                        text))
                    (div :class "active section"
                      breadcrumb)))))))
        (loop-tpl :bindings [[type message] app/messages]
          (div :class {:ui true
                       :warning  (= @type :warning)
                       :info     (= @type :info)
                       :positive (= @type :success)
                       :negative (= @type :error)
                       :message true }
            (i :class "close icon" :on-click #(app/remove-message @type @message))
            @message))))
    (div (cell= (secretary/dispatch! app/route)))))

(defroute "*" []
  (js/location.replace "#/page-not-found")
  nil)
