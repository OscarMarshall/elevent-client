(ns resources
  (:require
    [ajax.core :refer [GET POST]]
    [page]))

(defc token nil)

(defn get-api-base [params]
  (if (:secure? params)
    page/api-base-url-secure
    page/api-base-url))

(defn get-api-data [params]
  {:format :json
   :response-format :json
   :keywords? true
   :headers {:Authentication (str "Bearer " @token)
             :Authorization (when (contains? params :auth-string)
                              (str "Basic " (:auth-string params)))}
   :handler (:handler params)
   :error-handler (:error-handler params)})

(defn api-get [url params]
  (GET (str (get-api-base params) url)
       (get-api-data params)))

(defn api-get-secure [url params]
  (api-get url (assoc params :secure? true)))

(defn api-post [url params]
  (POST (str (get-api-base params) url)
        (assoc (get-api-data params)
          :params (:data params))))

(defn api-post-secure [url params]
  (api-post url (assoc params :secure? true)))


; (defc schedule '())
; (cell= (when session/user
;          (.getJSON js/jQuery
;                    (str page/api-base-url
;                         "/users"
;                         "/" (:UserId session/user)
;                         "/events"
;                         "/" (:EventId event)
;                         "/activities")
;                    ~(fn [json]
;                       (->> (js->clj json :keywordize-keys true)
;                            (map :ActivityId)
;                            (reset! schedule))))))

(defc activities {})
(api-get "/activities"
         {:handler (fn [json]
                     (->> (group-by :EventId json)
                          (map (fn [[event-id event-activities]]
                                 (->> event-activities
                                      (map #(vector (:ActivityId %) %))
                                      (into {})
                                      (vector event-id))))
                          (into {})
                          (reset! activities)))})
; (defn add-activity [user-id activity-id]
;   (.post js/jQuery
;          (str page/api-base-url
;               "/users"
;               "/" user-id
;               "/activity")
;          (js-obj "ActivityId" activity-id)
;          (fn [] (swap! resources/schedule #(conj % activity-id)))
;          "json"))
; (defn remove-activity [user-id activity-id]
;   (.ajax js/jQuery
;          (js-obj "url" (str page/api-base-url
;                            "/users"
;                            "/" user-id
;                            "/activities"
;                            "/" activity-id)
;                  "type" "DELETE"
;                  "success" (fn [] (swap! resources/schedule
;                                          #(vec (remove (partial == activity-id)
;                                                        %))))
;                  "dataType" "json")))

(defc organizations {})
(api-get "/organizations"
         {:handler (fn [json]
                     (->> (map #(vector (:OrganizationId %) %) json)
                          (into {})
                          (reset! organizations)))})

(defc events {})
(api-get "/events"
         {:handler (fn [json]
                     (->> (map #(vector (:EventId %) %) json)
                          (into {})
                          (reset! events)))})
