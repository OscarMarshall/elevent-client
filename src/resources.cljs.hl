(ns resources
  (:require
    [page]
    [session]))

(defc organizer
  {:Title "Asian American Student Association"
   :Name  "asian-american-student-association"})

(defc event
  {:EventId
   2

   :Title
   "University of Utah Asian American High School Conference 2015"

   :Name
   "university-of-utah-asian-american-high-school-conference-2015"

   :Description
   "The 16th annual Asian American High School Conference on Friday, February 27th, 2015 from 8:00 am until 2:00 pm is presented by the Asian American Student Association at the University of Utah and sponsored by President David W. Pershing and Provost Ruth Watkins. Our goal is to promote to all students, in particular Asian American youth, to apply and attend college. Although all programs will be made specifically for Asian American youth and be facilitated by students well-informed of Asian American issues, the conference is open to everyone. Workshops include, but are not limited to, admissions and scholarship aid, Asian American contemporary issues, major exploration, program-specific exploration, leadership opportunities, and service opportunities. Lunch is provided for all registered applicants.
*For more information, please contact AASA (aasa.uofu@gmail.com), Deepika Malla (deepikashah6@gmail.com), or Jimmy Sieng (jsieng@hotmail.com)."})

(defc schedule '())
(cell= (when session/user
         (.getJSON js/jQuery
                   (str page/api-base-url
                        "/users"
                        "/" (:UserId session/user)
                        "/events"
                        "/" (:EventId event)
                        "/activities")
                   ~(fn [json]
                      (->> (js->clj json :keywordize-keys true)
                           (map :ActivityId)
                           (reset! schedule))))))

(defc activities '())
(cell= (when event
         (.getJSON js/jQuery
                   (str page/api-base-url
                        "/events"
                        "/" (:EventId event)
                        "/activities")
                   ~(fn [json]
                      (->> (js->clj json :keywordize-keys true)
                           (map #(vector (:ActivityId %) %))
                           (into {})
                           (reset! activities)
                           (prn-str)
                           (.log js/console))))))
(defn add-activity [user-id activity-id]
  (.post js/jQuery
         (str page/api-base-url
              "/users"
              "/" user-id
              "/activity")
         (js-obj "ActivityId" activity-id)
         (fn [] (swap! resources/schedule #(conj % activity-id)))
         "json"))
(defn remove-activity [user-id activity-id]
  (.ajax js/jQuery
         (js-obj "url" (str page/api-base-url
                           "/users"
                           "/" user-id
                           "/activities"
                           "/" activity-id)
                 "type" "DELETE"
                 "success" (fn [] (swap! resources/schedule
                                         #(vec (remove (partial == activity-id)
                                                       %))))
                 "dataType" "json")))

(defc organizations '())
(cell= (.getJSON js/jQuery
                 (str page/api-base-url
                      "/organizations")
                 ~(fn [json]
                    (->> (js->clj json :keywordize-keys true)
                         (reset! organizations)
                         (prn-str)
                         (.log js/console)))))

(defc events '())
(cell= (.getJSON js/jQuery
                 (str page/api-base-url
                      "/events")
                 ~(fn [json]
                    (->> (js->clj json :keywordize-keys true)
                         (reset! events)
                         (prn-str)
                         (.log js/console)))))
(defn create-event [form-data]
  (let [new-event (clj->js (assoc form-data
                             :Organization
                             (int (.val (js/jQuery "#event-organization")))))]
    (.post js/jQuery
           (str page/api-base-url
                "/events")
           new-event
           (fn [] (swap! resources/events #(conj % new-event)))
           "json")))

(defn register [form-data]
  (.getJSON js/jQuery
            (str page/api-base-url
                 "/users?email="
                 (:email form-data))
            (fn [json]
              (let [user-id
                    (:UserId (js->clj json :keywordize-keys true))

                    create-attendee
                    (fn [user-id]
                      (.post js/jQuery
                             (str page/api-base-url "/events/" 2 "/attendees")
                             (clj->js {:UserId user-id})
                             (fn [json]
                               (session/login! user-id)
                               (set! (.-location js/page)
                                     "/#/events/asian-american-student-association/university-of-utah-asian-american-high-school-conference-2015/schedule"))
                             "json"))]
                (if (zero? user-id)
                  ; user does not exist
                  (.post js/jQuery
                         (str page/api-base-url "/users")
                         (clj->js {:Email     (:email form-data)
                                   :FirstName (:first-name form-data)
                                   :LastName  (:last-name form-data)})
                         #(create-attendee
                            (:UserId (js->clj % :keywordize-keys true)))
                         "json")
                  (create-attendee user-id))))))
