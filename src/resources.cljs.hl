(ns resources
  (:require
    [ajax.core :refer [GET POST]]
    [page]))

; (defc schedule '())
; (cell= (when session/user
;          (.getJSON js/jQuery
;                    (str page/api-base-url
;                         "/users"
;                         "/" (:UserId session/user)
;                         "/events"
;                         "/" (:EventId event)
;                         "/activities")
;                    ~(fn [json]
;                       (->> (js->clj json :keywordize-keys true)
;                            (map :ActivityId)
;                            (reset! schedule))))))

; (defc activities '())
(defn read-activities [event-id state]
  (when event-id
    (.getJSON js/jQuery
              (str page/api-base-url "/events/" event-id "/activities")
              (fn [json]
                (->> (js->clj json :keywordize-keys true)
                     (map #(vector (:ActivityId %) %))
                     (into {})
                     (reset! state))))))
; (defn add-activity [user-id activity-id]
;   (.post js/jQuery
;          (str page/api-base-url
;               "/users"
;               "/" user-id
;               "/activity")
;          (js-obj "ActivityId" activity-id)
;          (fn [] (swap! resources/schedule #(conj % activity-id)))
;          "json"))
; (defn remove-activity [user-id activity-id]
;   (.ajax js/jQuery
;          (js-obj "url" (str page/api-base-url
;                            "/users"
;                            "/" user-id
;                            "/activities"
;                            "/" activity-id)
;                  "type" "DELETE"
;                  "success" (fn [] (swap! resources/schedule
;                                          #(vec (remove (partial == activity-id)
;                                                        %))))
;                  "dataType" "json")))

; (defc organizations '())
; (cell= (.getJSON js/jQuery
;                  (str page/api-base-url
;                       "/organizations")
;                  ~(fn [json]
;                     (->> (js->clj json :keywordize-keys true)
;                          (reset! organizations)
;                          (prn-str)
;                          (.log js/console)))))

(defc events {})
(cell= (.getJSON js/jQuery
                 (str page/api-base-url
                      "/events")
                 ~(fn [json]
                    (->> (js->clj json :keywordize-keys true)
                         (map #(vector (:EventId %) %))
                         (into {})
                         (reset! events)))))
(defn create-event [form-data]
  (let [new-event (clj->js (assoc form-data
                             :Organization
                             (int (.val (js/jQuery "#event-organization")))))]
    (.post js/jQuery
           (str page/api-base-url
                "/events")
           new-event
           (fn [] (swap! resources/events #(conj % new-event)))
           "json")))

(defn register-site [form-data]
  (POST (str page/api-base-url "/users")
        {:response-format :json
         :keywords? true
         ;:params {:Email     (:email form-data)
         ;         :FirstName (:first-name form-data)
         ;         :LastName  (:last-name form-data)}
         :handler :nothing}))

(defn get-api-base [params]
  (if (:secure? params)
    page/api-base-url-secure
    page/api-base-url))

(defn get-api-data [params]
  {:format :json
   :response-format :json
   :keywords? true
   :headers (cond
              (contains? params :token)       {:Authorization (str "Bearer " (:token params))}
              (contains? params :auth-string) {:Authorization (str "Basic " (:auth-string params))}
              :else {})
   :handler (:handler params)
   :error-handler (:error-handler params)})

(defn api-get [url params]
  (GET (str (get-api-base params) url)
       (get-api-data params)))

(defn api-get-secure [url params]
  (api-get url (assoc params :secure? true)))

(defn api-post [url params]
  (.log js/console (:data params))
  (POST (str (get-api-base params) url)
        (assoc (get-api-data params)
          :params (:data params))))

(defn api-post-secure [url params]
  (api-post url (assoc params :secure? true)))
